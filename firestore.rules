/**
 * @fileOverview Firestore Security Rules for MovieRush.
 *
 * Core Philosophy: This ruleset enforces a strict user-ownership model, where users can only access and modify their own data. Public read access is granted to the `tickets` collection for showcasing available tickets.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the authenticated user can read/write their own profile.
 * - /tickets/{ticketId}: Stores all tickets. Read access is public, but only the ticket owner can modify or delete.
 * - /users/{userId}/posted_tickets/{ticketId}: Stores tickets posted by a specific user. Only the owner user can create/read/write these.
 * - /users/{userId}/purchased_tickets/{transactionId}: Stores tickets purchased by a specific user. Only the owner user can create/read/write these.
 * - /transactions/{transactionId}: Stores all transaction records. Only the buyer or seller can read.
 * - /users/{userId}/activity_logs/{logId}: Stores user activity logs. Only the user can create/read/write their own logs.
 *
 * Key Security Decisions:
 * - Public read access to the `tickets` collection is allowed.
 * - User listing is implicitly denied by the absence of a top-level `list` rule on `/users`.
 * - The default security posture for ambiguous relationships is strict owner-only access.
 *
 * Denormalization for Authorization:
 * - The `postedBy` field is duplicated in `tickets` and `users/{userId}/posted_tickets` to avoid `get()` calls.
 * - The `buyerId` is duplicated in `transactions` and `users/{userId}/purchased_tickets`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own user profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the authenticated user's ID matches the userId.
     * @deny (get, create, update, delete) if the authenticated user's ID does not match the userId.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows anyone to read tickets, but only the owner can create, update, or delete.
     * @path /tickets/{ticketId}
     * @allow (get, list) to anyone.
     * @allow (create) if request.auth.uid matches request.resource.data.postedBy.
     * @allow (update, delete) if request.auth.uid matches resource.data.postedBy and the resource exists.
     * @deny (create) if request.auth.uid does not match request.resource.data.postedBy.
     * @deny (update, delete) if request.auth.uid does not match resource.data.postedBy.
     * @principle Public read with owner-only writes.
     */
    match /tickets/{ticketId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.postedBy == request.auth.uid;
      allow update: if isSignedIn() && resource.data.postedBy == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.postedBy == request.auth.uid;
    }

    /**
     * @description Allows a user to manage tickets they have posted.
     * @path /users/{userId}/posted_tickets/{ticketId}
     * @allow (get, list, create, update, delete) if the authenticated user's ID matches the userId.
     * @deny (get, list, create, update, delete) if the authenticated user's ID does not match the userId.
     * @principle Restricts access to a user's own data tree. Enforces document ownership for writes.
     */
    match /users/{userId}/posted_tickets/{ticketId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.postedBy == userId;
      allow update: if isSignedIn() && isOwner(userId) && request.resource.data.postedBy == userId;
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows a user to manage the record of tickets they have purchased.
     * @path /users/{userId}/purchased_tickets/{transactionId}
     * @allow (get, list, create, update, delete) if the authenticated user's ID matches the userId.
     * @deny (get, list, create, update, delete) if the authenticated user's ID does not match the userId.
     * @principle Restricts access to a user's own data tree. Enforces document ownership for writes.
     */
    match /users/{userId}/purchased_tickets/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.buyerId == userId;
      allow update: if isSignedIn() && isOwner(userId) && request.resource.data.buyerId == userId;
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows the buyer or seller to read a transaction. Anyone can create a transaction.
     * @path /transactions/{transactionId}
     * @allow (get) if the authenticated user is either the buyer or the seller.
     * @allow (create) to anyone.
     * @deny (list, update, delete) to everyone.
     * @principle Allows shared read access.
     */
    match /transactions/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && (resource.data.buyerId == request.auth.uid || resource.data.sellerId == request.auth.uid);
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to manage their own activity logs.
     * @path /users/{userId}/activity_logs/{logId}
     * @allow (get, list, create, update, delete) if the authenticated user's ID matches the userId.
     * @deny (get, list, create, update, delete) if the authenticated user's ID does not match the userId.
     * @principle Restricts access to a user's own data tree. Enforces document ownership for writes.
     */
    match /users/{userId}/activity_logs/{logId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}