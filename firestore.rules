/**
 * @file Firebase Security Rules for MovieRush.
 *
 * @description This ruleset enforces a strict user-ownership model for user-specific data while allowing public read access to the 'tickets' collection.
 *
 * @data_structure
 * - /users/{userId}: Stores user profile information; only accessible by the user themselves.
 * - /tickets/{ticketId}: Stores publicly-readable ticket information; write-access restricted to ticket owners.
 * - /users/{userId}/posted_tickets/{ticketId}: Stores tickets posted by a user; only accessible by that user.
 * - /users/{userId}/purchased_tickets/{transactionId}: Stores tickets purchased by a user; only accessible by that user.
 * - /transactions/{transactionId}: Stores all transactions; write-access is not explicitly granted in these rules.
 * - /users/{userId}/activity_logs/{logId}: Stores user activity logs; only accessible by that user.
 *
 * @key_security_decisions
 * - Users can only access their own user document and associated subcollections.
 * - Public read access is granted to the /tickets collection, but write access is restricted to owners (determined by the 'postedBy' field).
 * - Listing of all users is disallowed for privacy reasons.
 * - Transactions collection writes are not explicitly granted and should be managed through other means (e.g., server-side functions).
 *
 * @denormalization_for_authorization
 * - The 'postedBy' field is duplicated in the 'tickets' and 'users/{userId}/posted_tickets' collections to allow for simple ownership checks without additional reads.
 * - The 'buyerId' field is duplicated in the 'transactions' and 'users/{userId}/purchased_tickets' collections for similar reasons.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by the authenticated user.
     * @path N/A (Helper Function)
     * @allow N/A (Helper Function)
     * @deny N/A (Helper Function)
     * @principle Helper function; ensures the request is made by the authenticated user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided user ID.
     * @path N/A (Helper Function)
     * @allow N/A (Helper Function)
     * @deny N/A (Helper Function)
     * @principle Helper function; enforces user ownership.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

     /**
      * @description Checks if the authenticated user's ID matches the provided user ID and the resource exists.
      * @path N/A (Helper Function)
      * @allow N/A (Helper Function)
      * @deny N/A (Helper Function)
      * @principle Helper function; enforces user ownership and resource existence for updates and deletes.
      */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to user profiles.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (get) User with ID 'user123' can read their own profile.
     * @allow (create) User with ID 'user123' can create their own profile.
     * @allow (update) User with ID 'user123' can update their own profile.
     * @allow (delete) User with ID 'user123' can delete their own profile.
     * @deny (get) User with ID 'user456' cannot read the profile of user 'user123'.
     * @deny (create) User with ID 'user456' cannot create the profile of user 'user123'.
     * @deny (update) User with ID 'user456' cannot update the profile of user 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete the profile of user 'user123'.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to tickets.
     * @path /databases/{database}/documents/tickets/{ticketId}
     * @allow (get) Any user can read ticket information.
     * @allow (list) Any user can list ticket information.
     * @allow (create) User with ID 'user123' can create a ticket if they are the owner ('postedBy' field).
     * @allow (update) User with ID 'user123' can update a ticket if they are the owner ('postedBy' field) and the ticket exists.
     * @allow (delete) User with ID 'user123' can delete a ticket if they are the owner ('postedBy' field) and the ticket exists.
     * @deny (create) User with ID 'user456' cannot create a ticket owned by user 'user123'.
     * @deny (update) User with ID 'user456' cannot update a ticket owned by user 'user123'.
     * @deny (delete) User with ID 'user456' cannot delete a ticket owned by user 'user123'.
     * @principle Allows public read access but enforces document ownership for writes.
     */
    match /tickets/{ticketId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.postedBy == request.auth.uid;
      allow update: if isSignedIn() && resource != null && resource.data.postedBy == request.auth.uid;
      allow delete: if isSignedIn() && resource != null && resource.data.postedBy == request.auth.uid;
    }

    /**
     * @description Controls access to tickets posted by a specific user.
     * @path /databases/{database}/documents/users/{userId}/posted_tickets/{ticketId}
     * @allow (get) User with ID 'user123' can read their own posted tickets.
     * @allow (list) User with ID 'user123' can list their own posted tickets.
     * @allow (create) User with ID 'user123' can create a posted ticket under their ID.
     * @allow (update) User with ID 'user123' can update a posted ticket under their ID, provided it exists.
     * @allow (delete) User with ID 'user123' can delete a posted ticket under their ID, provided it exists.
     * @deny (get) User with ID 'user456' cannot read tickets posted by user 'user123'.
     * @deny (create) User with ID 'user456' cannot create a posted ticket under user 'user123''s ID.
     * @principle Restricts access to a user's own posted tickets. Enforces that the `postedBy` field matches the path.
     */
    match /users/{userId}/posted_tickets/{ticketId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.postedBy == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.postedBy == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to tickets purchased by a specific user (transactions).
     * @path /databases/{database}/documents/users/{userId}/purchased_tickets/{transactionId}
     * @allow (get) User with ID 'user123' can read their own purchased tickets.
     * @allow (list) User with ID 'user123' can list their own purchased tickets.
     * @allow (create) User with ID 'user123' can create a purchased ticket under their ID, provided the `buyerId` matches.
     * @allow (update) User with ID 'user123' can update a purchased ticket under their ID, provided the `buyerId` matches and the document exists.
     * @allow (delete) User with ID 'user123' can delete a purchased ticket under their ID, provided it exists.
     * @deny (create) User with ID 'user456' cannot create a purchased ticket under user 'user123''s ID.
     * @principle Restricts access to a user's own purchased tickets. Enforces that the `buyerId` field matches the path.
     */
    match /users/{userId}/purchased_tickets/{transactionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.buyerId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.buyerId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to all transaction records.
     * @path /databases/{database}/documents/transactions/{transactionId}
     * @allow N/A
     * @deny (get) Always deny read access to the 'transactions' collection.
     * @deny (list) Always deny list access to the 'transactions' collection.
     * @deny (create) Always deny create access to the 'transactions' collection.
     * @deny (update) Always deny update access to the 'transactions' collection.
     * @deny (delete) Always deny delete access to the 'transactions' collection.
     * @principle Denies all direct access to the 'transactions' collection, suggesting that transactions are handled server-side.
     */
    match /transactions/{transactionId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to user activity logs.
     * @path /databases/{database}/documents/users/{userId}/activity_logs/{logId}
     * @allow (get) User with ID 'user123' can read their own activity logs.
     * @allow (list) User with ID 'user123' can list their own activity logs.
     * @allow (create) User with ID 'user123' can create an activity log under their ID.
     * @allow (update) User with ID 'user123' can update an activity log under their ID, provided it exists.
     * @allow (delete) User with ID 'user123' can delete an activity log under their ID, provided it exists.
     * @deny (get) User with ID 'user456' cannot read activity logs of user 'user123'.
     * @deny (create) User with ID 'user456' cannot create an activity log under user 'user123''s ID.
     * @principle Restricts access to a user's own activity logs.
     */
    match /users/{userId}/activity_logs/{logId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}