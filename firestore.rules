/**
 * @fileOverview Firestore Security Rules for MovieRush.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and their associated tickets and transactions.
 * Public read access is allowed for the top-level 'tickets' collection to enable listing available tickets,
 * but write access is restricted to the owner.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only by the user themselves.
 * - /tickets/{ticketId}: Stores all tickets, publicly readable but writable only by the ticket poster.
 * - /users/{userId}/posted_tickets/{ticketId}: Stores tickets posted by a specific user, mirroring the /tickets collection for ownership.
 * - /users/{userId}/purchased_tickets/{transactionId}: Stores transactions for tickets purchased by a specific user.
 * - /transactions/{transactionId}: Stores all transaction records, readable and writable only by authenticated users.
 *
 * Key Security Decisions:
 * - Users can only access their own profile data.
 * - Public listing of all tickets is allowed.
 * - Ticket creation requires the 'postedBy' field to match the authenticated user's ID.
 * - Only the ticket poster can modify or delete a ticket.
 * - Data validation is limited to authorization-critical fields to enable rapid prototyping.
 *
 * Denormalization for Authorization:
 * - The `postedBy` field is duplicated in `tickets` and `users/{userId}/posted_tickets` to avoid `get()` calls when checking ticket ownership.
 * - The `buyerId` field is duplicated in `transactions` and `users/{userId}/purchased_tickets` to avoid `get()` calls when checking transaction ownership.
 *
 * Structural Segregation:
 * - Separate collections for user-specific tickets (posted_tickets, purchased_tickets) and general tickets (tickets)
 *   allow efficient and secure listing based on ownership vs. public availability.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (read, write) if the user is the owner of the profile.
     * @deny (read, write) if the user is not authenticated or not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to tickets. Publicly readable, writable only by the ticket poster.
     * @path /tickets/{ticketId}
     * @allow (read) any authenticated user.
     * @allow (create) if the user is authenticated and the 'postedBy' field matches the user ID.
     * @allow (update, delete) if the user is the owner of the ticket.
     * @deny (create, update, delete) if the user is not authenticated or not the owner.
     * @principle Allows public read access but enforces ownership for writes.
     */
    match /tickets/{ticketId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.postedBy == request.auth.uid;
      allow update: if isOwner(resource.data.postedBy) && resource != null;
      allow delete: if isOwner(resource.data.postedBy) && resource != null;
    }

    /**
     * @description Controls access to tickets posted by a specific user.
     * @path /users/{userId}/posted_tickets/{ticketId}
     * @allow (read, list) if the user is the owner.
     * @allow (create) if the user is the owner and the 'postedBy' field matches the user ID.
     * @allow (update, delete) if the user is the owner of the ticket.
     * @deny (create, update, delete) if the user is not authenticated or not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/posted_tickets/{ticketId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.postedBy == request.auth.uid;
      allow update: if isOwner(userId) && resource != null && resource.data.postedBy == request.resource.data.postedBy;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to tickets purchased by a specific user.
     * @path /users/{userId}/purchased_tickets/{transactionId}
     * @allow (read, list) if the user is the owner.
     * @allow (create) if the user is the owner and the 'buyerId' field matches the user ID.
     * @allow (update, delete) if the user is the owner of the transaction.
     * @deny (create, update, delete) if the user is not authenticated or not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/purchased_tickets/{transactionId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.buyerId == request.auth.uid;
      allow update: if isOwner(userId) && resource != null && resource.data.buyerId == request.resource.data.buyerId;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to transaction records.
     * @path /transactions/{transactionId}
     * @allow (read, create, update, delete) if the user is authenticated.
     * @deny (read, create, update, delete) if the user is not authenticated.
     */
    match /transactions/{transactionId} {
        function isSignedIn() {
            return request.auth != null;
        }
        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
    }
  }
}