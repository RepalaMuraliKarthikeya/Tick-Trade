rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their own profile document.
     * @allow (get, update, delete) - User with UID 'user_abc' can get, update, and delete their own profile document.
     * @deny (create) - User with UID 'user_xyz' cannot create a profile document for 'user_abc'.
     * @deny (get, update, delete) - User with UID 'user_xyz' cannot get, update, or delete the profile document for 'user_abc'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to ticket documents. Publicly readable, but writes are owner-only.
     * @path /tickets/{ticketId}
     * @allow (get, list) - Any user (signed in or not) can read the ticket.
     *
     * @allow (create) - User with UID 'user_abc' can create a ticket with `postedBy: 'user_abc'`.
     * @allow (update, delete) - User with UID 'user_abc' can update/delete a ticket where `resource.data.postedBy == 'user_abc'`.
     *
     * @deny (create) - User with UID 'user_xyz' cannot create a ticket with `postedBy: 'user_abc'`.
     * @deny (update, delete) - User with UID 'user_xyz' cannot update/delete a ticket where `resource.data.postedBy == 'user_abc'`.
     *
     * @principle Allows public read access while restricting writes to the ticket owner.
     */
    match /tickets/{ticketId} {
      function isOwner(ownerId) {
        return request.auth.uid == ownerId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.postedBy == request.auth.uid;
      allow update: if isSignedIn() && resource.data.postedBy == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.postedBy == request.auth.uid;
    }

    /**
     * @description Controls access to tickets posted by a specific user.
     * @path /users/{userId}/posted_tickets/{ticketId}
     * @allow (create, get, list, update, delete) - User with UID 'user_abc' can manage tickets under /users/user_abc/posted_tickets/{ticketId}
     * @deny (create, get, list, update, delete) - User with UID 'user_xyz' cannot manage tickets under /users/user_abc/posted_tickets/{ticketId}
     * @principle Enforces strict user ownership for tickets posted by the user.
     */
    match /users/{userId}/posted_tickets/{ticketId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to tickets purchased by a specific user.
     * @path /users/{userId}/purchased_tickets/{transactionId}
     * @allow (create, get, list, update, delete) - User with UID 'user_abc' can manage purchased tickets under /users/user_abc/purchased_tickets/{transactionId}
     * @deny (create, get, list, update, delete) - User with UID 'user_xyz' cannot manage tickets under /users/user_abc/purchased_tickets/{transactionId}
     * @principle Enforces strict user ownership for purchased tickets.
     */
    match /users/{userId}/purchased_tickets/{transactionId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to transaction documents.
     * @path /transactions/{transactionId}
     * @allow (get) - Authenticated users can read transaction documents.
     * @allow (list) - Listing transactions is disabled.
     * @deny (create, update, delete) - No one can create, update, or delete transaction documents.
     * @principle Prevents unauthorized modification of transaction records.
     */
    match /transactions/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to user activity logs.
     * @path /users/{userId}/activity_logs/{logId}
     * @allow (create, get, list, update, delete) - User with UID 'user_abc' can manage activity logs under /users/user_abc/activity_logs/{logId}
     * @deny (create, get, list, update, delete) - User with UID 'user_xyz' cannot manage activity logs under /users/user_abc/activity_logs/{logId}
     * @principle Enforces strict user ownership for activity logs.
     */
    match /users/{userId}/activity_logs/{logId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow delete: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
    }
  }
}