{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the MovieRush platform.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user entity."
        },
        "name": {
          "type": "string",
          "description": "User's full name."
        },
        "email": {
          "type": "string",
          "description": "User's email address.",
          "format": "email"
        },
        "postedTicketIds": {
          "type": "array",
          "description": "References to Ticket entities posted by the user. (Relationship: User 1:N Ticket)",
          "items": {
            "type": "string"
          }
        },
        "purchasedTicketIds": {
          "type": "array",
          "description": "References to Ticket entities purchased by the user. (Relationship: User 1:N Ticket)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "name",
        "email"
      ]
    },
    "Ticket": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Ticket",
      "type": "object",
      "description": "Represents a movie ticket posted for sale.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the ticket entity."
        },
        "movieName": {
          "type": "string",
          "description": "Name of the movie."
        },
        "theaterName": {
          "type": "string",
          "description": "Name of the theater."
        },
        "location": {
          "type": "string",
          "description": "Location of the theater."
        },
        "dateTime": {
          "type": "string",
          "description": "Date and time of the movie show.",
          "format": "date-time"
        },
        "ticketCount": {
          "type": "number",
          "description": "Number of tickets available."
        },
        "ticketPrice": {
          "type": "number",
          "description": "Price of each ticket."
        },
        "posterImageUrl": {
          "type": "string",
          "description": "URL of the movie poster or theater image.",
          "format": "uri"
        },
        "postedBy": {
          "type": "string",
          "description": "Reference to User who posted the ticket. (Relationship: User 1:N Ticket)"
        },
        "status": {
          "type": "string",
          "description": "Status of the ticket (available, sold)."
        }
      },
      "required": [
        "id",
        "movieName",
        "theaterName",
        "location",
        "dateTime",
        "ticketCount",
        "ticketPrice",
        "postedBy",
        "status"
      ]
    },
    "Transaction": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Transaction",
      "type": "object",
      "description": "Represents a transaction for a ticket purchase.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the transaction entity."
        },
        "ticketId": {
          "type": "string",
          "description": "Reference to the Ticket entity involved in the transaction. (Relationship: Transaction 1:1 Ticket)"
        },
        "buyerId": {
          "type": "string",
          "description": "Reference to the User who purchased the ticket. (Relationship: User 1:N Transaction)"
        },
        "sellerId": {
          "type": "string",
          "description": "Reference to the User who sold the ticket. (Relationship: User 1:N Transaction)"
        },
        "paymentMethod": {
          "type": "string",
          "description": "Payment method used for the transaction."
        },
        "transactionDate": {
          "type": "string",
          "description": "Date and time of the transaction.",
          "format": "date-time"
        },
        "amount": {
          "type": "number",
          "description": "Amount of the transaction."
        }
      },
      "required": [
        "id",
        "ticketId",
        "buyerId",
        "sellerId",
        "paymentMethod",
        "transactionDate",
        "amount"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "tickets/{ticketId}",
        "definition": {
          "entityName": "Ticket",
          "schema": {
            "$ref": "#/backend/entities/Ticket"
          },
          "description": "Stores movie tickets available for sale.",
          "params": [
            {
              "name": "ticketId",
              "description": "The unique identifier of the ticket."
            }
          ]
        }
      },
      {
        "path": "users/{userId}/posted_tickets/{ticketId}",
        "definition": {
          "entityName": "Ticket",
          "schema": {
            "$ref": "#/backend/entities/Ticket"
          },
          "description": "Stores tickets posted by a specific user. Includes denormalized 'postedBy' field for authorization independence.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "ticketId",
              "description": "The unique identifier of the ticket."
            }
          ]
        }
      },
      {
        "path": "users/{userId}/purchased_tickets/{transactionId}",
        "definition": {
          "entityName": "Transaction",
          "schema": {
            "$ref": "#/backend/entities/Transaction"
          },
          "description": "Stores tickets purchased by a specific user. Includes denormalized 'buyerId' field for authorization independence.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            },
            {
              "name": "transactionId",
              "description": "The unique identifier of the transaction."
            }
          ]
        }
      },
      {
        "path": "transactions/{transactionId}",
        "definition": {
          "entityName": "Transaction",
          "schema": {
            "$ref": "#/backend/entities/Transaction"
          },
          "description": "Stores all transaction records.",
          "params": [
            {
              "name": "transactionId",
              "description": "The unique identifier of the transaction."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to support the MovieRush application, prioritizing security, scalability, and ease of debugging. It leverages path-based ownership for user-specific data and denormalization to avoid complex security rules. Here's a breakdown:\n\n*   **Users Collection:** Stores user profiles.\n*   **Tickets Collection:**  Maintains a collection of all available tickets.  The `postedBy` field stores the user ID of the ticket poster. This collection supports the primary feature of listing available tickets.\n*   **Users/{userId}/posted_tickets Collection:** Subcollection under each user to store tickets posted by them. This enforces clear ownership and allows easy retrieval of tickets posted by a specific user. The `postedBy` field is copied here to ensure authorization independence, avoiding `get()` calls in security rules.\n*   **Users/{userId}/purchased_tickets Collection:**  Subcollection under each user to store tickets purchased by them, ensuring clear ownership and easy retrieval. The `buyerId` is copied here to ensure authorization independence.\n*   **Transactions Collection:** Records all transaction details. The `buyerId` and `sellerId` are explicitly stored for audit and reporting.\n\n**Authorization Independence:** The design uses denormalization to avoid `get()` calls in security rules. For example:\n\n*   The `postedBy` field is duplicated in `tickets` and `users/{userId}/posted_tickets`.\n*   The `buyerId` is duplicated in `transactions` and `users/{userId}/purchased_tickets`.\n\n**QAPs (Rules are not Filters):**\n\n*   The segregation of `posted_tickets` and `purchased_tickets` into user subcollections allows secure listing of tickets owned or bought by a specific user using path-based rules, without the need to filter based on document content.\n\nThis structure enables simple and robust security rules based on `request.auth.uid` and avoids complex nested `get()` calls, leading to better performance and maintainability."
  }
}